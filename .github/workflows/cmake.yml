name: CMake
on:
## события, на которые вызывается actions + ветки, для которых эти события
обрабатываются
 push:
 branches: [ main ]
 pull_request:
 branches: [ main ]
env:
# Конфигурация сборки, Release/Debug
 # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
 BUILD_TYPE: Release
jobs:
build:
 # The CMake configure and build commands are platform agnostic and should work
equally
 # well on Windows or Mac. You can convert this to a matrix build if you need
 # cross-platform coverage.
 # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-githubactions/managing-complex-workflows#using-a-build-matrix
 runs-on: ubuntu-latest
 steps:
 - uses: actions/checkout@v2
 # Конфигурация проекта с выбранным генератором. По-умолчанию отрабатывает Unix
Makefiles/Ninja
 - name: Configure CMake
 # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only
required if you are using a single-configuration generator such as make.
 # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?
highlight=cmake_build_type
 run: cmake -B ${{github.workspace}}/build -
DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
 # Сборка проекта с выбранным генератором. По-умолчанию отрабатывает Unix
Makefiles/Ninja
 - name: Build
 # Build your program with the given configuration
 run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
 # Шаг выполнения тестов
 - name: Test
 working-directory: ${{github.workspace}}/build
 # Execute tests defined by the CMake configuration.
 # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more
detail
 run: ctest -C ${{env.BUILD_TYPE}}
